<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby

# short for escape_snippet - escapes special snippet characters in str
def es(str)
	str.to_s.gsub(/([$`\\])/, "\\\\\\1")
end


# given a string, insert an open parenthesis in the first, best
# spot starting from the end
def insert_open(str)
	str.sub(/(.*)\b([(a-z0-9]+.*?)$/i, "\\1(\\2")
end


line = $stdin.read()
index = ENV['TM_LINE_INDEX'].to_i()
currentchar = line[index - 1].chr()

if currentchar == ')'
	# backtrack to find the open of this paren
	depth = 1
	searchline = line[0..(index - 2)].reverse
	searchline.split(//).each_index() do |i|
		ch = searchline[i].chr()
		if ch == ')'
			depth += 1
		elsif ch == '('
			depth -= 1
		end

		# at a depth of zero we should be sitting on the opening paren
		if depth == 0
			parenindex = [(index - 3 - i), 0].max()
			firstpart = insert_open(line[0..parenindex])
			if firstpart == line[0..parenindex]
				line = es(line[0..(index)]) + '$0' + es(line[(index + 1)..-1])
				break
			end
			
			secondpart = es(line[(parenindex + 2)..(index - 2)]) + ')$0' + es(line[index..-1])
			line = es(firstpart) + secondpart
			break
		end
	end
else
	line = es(insert_open(line[0..(index - 1)])) + ')$0' + es(line[index..-1])
end

print "#{line}"
</string>
	<key>fallbackInput</key>
	<string>line</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>@)</string>
	<key>name</key>
	<string>Extend Current Parens</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>source</string>
	<key>uuid</key>
	<string>775D0733-3804-463C-A0EF-65B2998F5CE1</string>
</dict>
</plist>
