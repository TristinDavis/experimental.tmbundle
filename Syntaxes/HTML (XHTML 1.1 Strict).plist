{
    name = "HTML (XHTML Strict 1.1)"; 
    scopeName = "text.html.xhtml.strict.1-1"; 
    foldingStartMarker = "(<(?i:(head|table|thead|tbody|tfoot|tr|div|fieldset|style|script|ul|ol|form|dl))\\b.*?>|\\{\\{?(if|foreach|capture|literal|foreach|php|section|strip)|\\{\\s*$)"; 
    foldingStopMarker = "(</(?i:(head|table|tr|div|fieldset|style|script|ul|ol|form|dl))>|\\{\\{?/(if|foreach|capture|literal|foreach|php|section|strip)|(^|\\s)\\})"; 
    patterns = (
        { include = "#xml-preprocessor"; },
        { include = "#sgml-declarations-preprocessor"; },
        { include = "#tag-html"; },
        { include = "#stray-char"; },
    ); 
    repository = {
        "xml-preprocessor" = {
            name = "meta.tag.preprocessor.xml.html"; 
            begin = "<\\?([\\w-]*)"; 
            end = "\\?>"; 
            captures = { 1 = { name = "entity.name.tag.xml.html"; }; };
            patterns = (
                {   name = "meta.attribute-with-value.html.strict";
                    match = "([\\w-]*)=((\".*?\")|(\'.*?\')|((\\?(?!>)|[^\"\'>\\s\\?])+))";
                    captures = {
                        1 = { name = "entity.other.attribute-name.html"; };
                        3 = { name = "string.quoted.double.html"; };
                        4 = { name = "string.quoted.single.html"; };
                        5 = { name = "string.unquoted.html"; };
                    };
                },
            ); 
        }; 
        "sgml-declarations-preprocessor" = {
            begin = "(?=<!)"; 
            end = "(?<=>)"; 
            patterns = (
                {   name = "meta.tag.sgml-declaration.doctype.html";
                    begin = "<!(DOCTYPE)"; 
                    end = ">"; 
                    captures = { 1 = { name = "entity.name.tag.doctype.html"; }; };
                    patterns = (
                        {
                            match = "\"[^\">]*\""; 
                            name = "string.quoted.double.doctype.identifiers-and-DTDs.html"; 
                        }
                    ); 
                },
                { include = "#sgml-declarations"; },
            ); 
        }; 
        "sgml-declarations" = {
            begin = "(?=<!)"; 
            end = "(?<=>)"; 
            patterns = (
                {   name = "meta.tag.sgml.empty.html";
                    match = "<!\\s*>";
                }, 
                {   name = "invalid.illegal.bad-comments-or-CDATA.html";
                    begin = "<!(?!DOCTYPE|--|\\[CDATA\\[)";
                    end = ">";
                }, 
                {   name = "meta.tag.preprocessor.server-side-includes.html";
                    begin = "<!--(#\\s*(include|config|echo|exec|fsize|flastmod|printenv|set))"; 
                    end = "-->"; 
                    captures = {
                        1 = { name = "support.function.server-side-include.html"; };
                    };
                    patterns = (
                        {   name = "other.preprocessor.server-side-includes.html"; 
                            match = "(errmsg|sizefmt|timefmt|var|encoding|cgi|cmd|file|virtual|value)=((\".*?\")|(\'.*?\')|([^\"\'>\\s]+))";
                            captures = {
                                1 = { name = "entity.other.attribute-name.html"; };
                                3 = { name = "string.quoted.double.html"; };
                                4 = { name = "string.quoted.single.html"; };
                                5 = { name = "string.unquoted.html"; };
                            };
                        }
                    ); 
                },
                { include = "#sgml-comment"; },
                {   name = "meta.scope.xml-cdata.html";
                    begin = "<!\\[CDATA\\["; 
                    end = "]]>"; 
                },
            ); 
        }; 
        "sgml-comment" = {
            name = "comment.block.html";
            comment = "Does not allow the closing bracket to be on a diff line that the --, which as far as I can tell is legal.";
            begin = "<!--"; 
            end = "--\\s*>"; 
            patterns = (
                {   name = "invalid.deprecated.bad-comment-ending-token.html";
                    match = "--(?!\\s*>)"; 
                }
            ); 
        }; 
        "tag-html" = {
            begin = "(<(html))";
            end = "((html)>)";
            captures = {
                1 = { name = "meta.tag.block.html.html.strict"; };
                2 = { name = "entity.name.tag.block.html.html.strict"; };
            };
            patterns = (
                {
                    begin = "(?<=>)";
                    end = "(</(?=html))";
                    endCaptures = {
                        1 = { name = "meta.tag.block.html.html.strict"; };
                    };
                    patterns = (
                        { include = "#sgml-declarations"; },
                        { include = "#tag-head"; },
                        { include = "#stray-char"; },
                    );
                },
                {   name = "meta.tag.block.html.html.strict";
                    begin = "";
                    end = ">";
                    patterns = (
                        {   name = "meta.attribute-with-value.html.strict";
                            begin = "(version)=(?=([\"']).*?[\"'])";
                            end = "";
                            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
                            patterns = (
                                {   name = "string.quoted.double";
                                    begin = "\"";
                                    end = "\"";
                                    patterns = (
                                        { match = "(?<=\"|')-//W3C//DTD XHTML 1\\.1//EN(?=\"|')"; },
                                        { include = "#values-generic-invalid"; },
                                    ); 
                                },
                                {   name = "string.quoted.single";
                                    begin = "'";
                                    end = "'";
                                    patterns = (
                                        { match = "(?<=\"|')-//W3C//DTD XHTML 1\\.1//EN(?=\"|')"; },
                                        { include = "#values-generic-invalid"; },
                                    ); 
                                },
                            ); 
                        },
                        { include = "#attributes-group-I18n"; },
                        { include = "#attribute-xmlns"; },
                        { include = "#attributes-illegal_char"; },
                    );
                },
            );
        }; 
        "tag-head" = {
            begin = "(<(head))";
            end = "((head)>)";
            captures = {
                1 = { name = "meta.tag.block.head.html.strict"; };
                2 = { name = "entity.name.tag.block.head.html.strict"; };
            };
            patterns = (
                {
                    begin = "(?<=>)";
                    end = "(</(?=head))";
                    endCaptures = {
                        1 = { name = "meta.tag.block.head.html.strict"; };
                    };
                    patterns = (
                        { include = "#sgml-declarations"; },
                        { include = "#tag-title"; },
                        { include = "#tag-meta"; },
                        { include = "#tag-link"; },
                        { include = "#tag-object-inheader"; },
                        { include = "#tag-script"; },
                        { include = "#tag-style"; },
                        { include = "#stray-char"; },
                    );
                },
                {   name = "meta.tag.block.head.html.strict";
                    begin = "";
                    end = ">";
                    patterns = (
                        { include = "#attribute-profile"; },
                        { include = "#attributes-group-I18n"; },
                        { include = "#attribute-xmlns"; },
                        { include = "#attributes-illegal_char"; },
                    );
                },
            );
        }; 
        "tag-title" = {
            begin = "(<(title))";
            end = "((title)>)";
            captures = {
                1 = { name = "meta.tag.inline.title.html.strict"; };
                2 = { name = "entity.name.tag.inline.title.html.strict"; };
            };
            patterns = (
                {
                    begin = "(?<=>)";
                    end = "(</(?=title))";
                    endCaptures = {
                        1 = { name = "meta.tag.inline.title.html.strict"; };
                    };
                    patterns = (
                        { include = "#sgml-declarations"; },
                        { include = "#entities"; },
                    );
                },
                {   name = "meta.tag.inline.title.html.strict";
                    begin = "";
                    end = ">";
                    patterns = (
                        { include = "#attribute-profile"; },
                        { include = "#attributes-group-I18n"; },
                        { include = "#attribute-xmlns"; },
                        { include = "#attributes-illegal_char"; },
                    );
                },
            );
        }; 
        "tag-meta" = {
            begin = "(<(meta))";
            end = "(/>)";
            captures = {
                1 = { name = "meta.tag.inline.meta.html.strict"; };
                2 = { name = "entity.name.tag.inline.meta.html.strict"; };
            };
            patterns = (
                {   name = "meta.tag.inline.meta.html.strict";
                    begin = "";
                    end = "(?=/>)";
                    patterns = (
                        { include = "#attribute-content"; },
                        { include = "#attribute-http-equiv"; },
                        { include = "#attribute-name"; },
                        { include = "#attribute-scheme"; },
                        { include = "#attributes-group-I18n"; },
                        { include = "#attribute-xmlns"; },
                        { include = "#attributes-illegal_char"; },
                    );
                },
            );
        }; 
        "tag-link" = {
            begin = "(<(link))";
            end = "(/>)";
            captures = {
                1 = { name = "meta.tag.inline.link.html.strict"; };
                2 = { name = "entity.name.tag.inline.link.html.strict"; };
            };
            patterns = (
                {   name = "meta.tag.inline.link.html.strict";
                    begin = "";
                    end = "(?=/>)";
                    patterns = (
                        { include = "#attribute-charset"; },
                        { include = "#attribute-href"; },
                        { include = "#attribute-hreflang"; },
                        { include = "#attribute-media"; },
                        { include = "#attribute-rel"; },
                        { include = "#attribute-rev"; },
                        { include = "#attribute-type"; },
                        { include = "#attributes-group-common"; },
                        { include = "#attribute-xmlns"; },
                        { include = "#attributes-illegal_char"; },
                    );
                },
            );
        }; 
        "tag-script" = {
            comment = "Bug: Invalid chars are sometimes picked up by the js syntax first.";
            begin = "(<(script))";
            end = "((/>)|((script)>))";
            captures = {
                1 = { name = "meta.tag.inline.script.html.strict"; };
                4 = { name = "entity.name.tag.inline.script.html.strict"; };
            };
            patterns = (
                {
                    begin = "(?<=[^/]>)";
                    end = "(</(?=script))";
                    endCaptures = {
                        1 = { name = "meta.tag.inline.script.html.strict"; };
                    };
                    contentName = "source.js.embedded.html.strict";
                    patterns = (
                        { include = "#sgml-comment"; },
                        {   name = "meta.scope.xml-cdata.html";
                            begin = "<!\\[CDATA\\["; 
                            end = "]]>"; 
                            patterns = (
                                { include = "source.js"; },
                            );
                        },
                        {   name = "invalid.illegal.char_not_allowed";
                            match = "<|>|]]>|--";
                        },
                        { include = "#entities"; },
                        { include = "source.js"; },
                    );
                },
                {   name = "meta.tag.inline.script.html.strict";
                    begin = "";
                    end = "((?=/>)|>)";
                    patterns = (
                        { include = "#attribute-xml:space"; },
                        { include = "#attribute-defer"; },
                        { include = "#attribute-src"; },
                        { include = "#attribute-type"; },
                        { include = "#attribute-charset"; },
                        { include = "#attribute-xmlns"; },
                        { include = "#attributes-illegal_char"; },
                    );
                },
            );
        }; 
        "tag-style" = {
            comment = "Bug: Invalid chars are sometimes picked up by the js syntax first.";
            begin = "(<(style))";
            end = "((style)>)";
            captures = {
                1 = { name = "meta.tag.inline.style.html.strict"; };
                2 = { name = "entity.name.tag.inline.style.html.strict"; };
            };
            patterns = (
                {
                    begin = "(?<=>)";
                    end = "(</(?=style))";
                    endCaptures = {
                        1 = { name = "meta.tag.inline.style.html.strict"; };
                    };
                    contentName = "source.css.embedded.html.strict";
                    patterns = (
                        { include = "#sgml-comment"; },
                        {   name = "meta.scope.xml-cdata.html";
                            begin = "<!\\[CDATA\\["; 
                            end = "]]>"; 
                            patterns = (
                                { include = "source.css"; },
                            );
                        },
                        {   name = "invalid.illegal.char_not_allowed";
                            match = "<|>|]]>|--";
                        },
                        { include = "#entities"; },
                        { include = "source.css"; },
                    );
                },
                {   name = "meta.tag.inline.style.html.strict";
                    begin = "";
                    end = ">";
                    patterns = (
                        { include = "#attribute-xml:space"; },
                        { include = "#attribute-title"; },
                        { include = "#attribute-media"; },
                        { include = "#attribute-type"; },
                        { include = "#attributes-group-I18n"; },
                        { include = "#attribute-xmlns"; },
                        { include = "#attributes-illegal_char"; },
                    );
                },
            );
        }; 
        "tag-object-inheader" = {
            begin = "(<(object))";
            end = "((/>)|((object)>))";
            captures = {
                1 = { name = "meta.tag.inline.object.html.strict"; };
                4 = { name = "entity.name.tag.inline.object.html.strict"; };
            };
            patterns = (
                {
                    begin = "(?<=[^/]>)";
                    end = "(</(?=object))";
                    endCaptures = {
                        1 = { name = "meta.tag.inline.object.html.strict"; };
                    };
                    patterns = (
                        { include = "#tag-param"; },
                        { include = "#entities"; },
                    );
                },
                {   name = "meta.tag.inline.object.html.strict";
                    begin = "";
                    end = "((?=/>)|>)";
                    patterns = (
                        { include = "#attribute-classid"; },
                        { include = "#attribute-codebase"; },
                        { include = "#attribute-codetype"; },
                        { include = "#attribute-data"; },
                        { include = "#attribute-declare"; },
                        { include = "#attribute-height"; },
                        { include = "#attribute-name"; },
                        { include = "#attribute-standby"; },
                        { include = "#attribute-tabindex"; },
                        { include = "#attribute-type"; },
                        { include = "#attribute-width"; },
                        { include = "#attribute-common"; },
                        { include = "#attribute-xmlns"; },
                        { include = "#attributes-illegal_char"; },
                    );
                },
            );
        }; 
        "tag-param" = {
            begin = "(<(param))";
            end = "(/>)";
            captures = {
                1 = { name = "meta.tag.inline.param.html.strict"; };
                2 = { name = "entity.name.tag.inline.param.html.strict"; };
            };
            patterns = (
                {   name = "meta.tag.inline.param.html.strict";
                    begin = "";
                    end = "(?=/>)";
                    patterns = (
                        { include = "#attribute-id"; },
                        { include = "#attribute-name"; },
                        { include = "#attribute-type"; },
                        { include = "#attribute-value"; },
                        { include = "#attribute-valuetype"; },
                        { include = "#attribute-xmlns"; },
                        { include = "#attributes-illegal_char"; },
                    );
                },
            );
        }; 
        "entities" = {
            patterns = (
                {   name = "constant.character.html.strict";
                    match = "&([a-zA-Z]+|#[0-9]+|#x[0-9a-fA-F]+);";
                },
                {   name = "invalid.illegal.stray-ampersand.html.strict";
                    match = "&(?!([a-zA-Z]+|#[0-9]+|#x[0-9a-fA-F]+);)";
                },
            );
        }; 
        "stray-char" = {
            comment = "Bug: Won't work...";
        }; 
        "values-generic-valid" = {
            patterns = (
                {   name = "string.quoted.double";
                    begin = "\"";
                    end = "\"";
                    patterns = (
                        { include = "#entities"; },
                    ); 
                },
                {   name = "string.quoted.single";
                    begin = "'";
                    end = "'";
                    patterns = (
                        { include = "#entities"; },
                    ); 
                },
            ); 
        }; 
        "values-generic-invalid" = {
            patterns = (
                {   name = "invalid.illegal.incorrect-value.html";
                    match = "(?<=\"|').*?(?=\"|')";
                },
            );
        }; 
        "attribute-xmlns" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(xmlns)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                {   name = "string.quoted.double";
                    begin = "\"";
                    end = "\"";
                    patterns = (
                        { match = "(?<=\"|')http://www.w3.org/1999/xhtml(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
                {   name = "string.quoted.single";
                    begin = "'";
                    end = "'";
                    patterns = (
                        { match = "(?<=\"|')http://www.w3.org/1999/xhtml(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
            ); 
        }; 
        "attribute-xml:space" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(xml:space)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                {   name = "string.quoted.double";
                    begin = "\"";
                    end = "\"";
                    patterns = (
                        { match = "(?<=\"|')preserve(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
                {   name = "string.quoted.single";
                    begin = "'";
                    end = "'";
                    patterns = (
                        { match = "(?<=\"|')preserve(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
            ); 
        }; 
        "attribute-charset" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(charset)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-class" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(class)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-classid" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(classid)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-codebase" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(codebase)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-codetype" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(codetype)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-content" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(content)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-data" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(data)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-declare" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(declare)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                {   name = "string.quoted.double";
                    begin = "\"";
                    end = "\"";
                    patterns = (
                        { match = "(?<=\"|')declare(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
                {   name = "string.quoted.single";
                    begin = "'";
                    end = "'";
                    patterns = (
                        { match = "(?<=\"|')declare(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
            ); 
        }; 
        "attribute-defer" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(defer)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                {   name = "string.quoted.double";
                    begin = "\"";
                    end = "\"";
                    patterns = (
                        { match = "(?<=\"|')defer(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
                {   name = "string.quoted.single";
                    begin = "'";
                    end = "'";
                    patterns = (
                        { match = "(?<=\"|')preserve(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
            ); 
        }; 
        "attribute-height" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(height)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                {   name = "string.quoted.double";
                    begin = "\"";
                    end = "\"";
                    patterns = (
                        { match = "(?<=\"|')([0-9]{0,5}|[0-9]{0,4}%)(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
                {   name = "string.quoted.single";
                    begin = "'";
                    end = "'";
                    patterns = (
                        { match = "(?<=\"|')([0-9]{0,5}|[0-9]{0,4}%)(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
            ); 
        }; 
        "attribute-href" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(href)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-hreflang" = {
            name = "meta.attribute-with-value.html.strict";
            comment = "Bug: This may not take into account all possible characters in NMTOKEN.";
            begin = "(hreflang)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                {   name = "string.quoted.double";
                    begin = "\"";
                    end = "\"";
                    patterns = (
                        {   match = "[\\w\\-:]+"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
                {   name = "string.quoted.single";
                    begin = "'";
                    end = "'";
                    patterns = (
                        {   match = "[\\w\\-:]+"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
            ); 
        }; 
        "attribute-http-equiv" = {
            name = "meta.attribute-with-value.html.strict";
            comment = "Bug: This may not take into account all possible characters in NMTOKEN.";
            begin = "(http-equiv)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                {   name = "string.quoted.double";
                    begin = "\"";
                    end = "\"";
                    patterns = (
                        {   match = "[\\w\\-:]+"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
                {   name = "string.quoted.single";
                    begin = "'";
                    end = "'";
                    patterns = (
                        {   match = "[\\w\\-:]+"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
            ); 
        }; 
        "attribute-id" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(id)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                {   name = "string.quoted.double";
                    begin = "\"";
                    end = "\"";
                    patterns = (
                        { match = "(?<=\"|')[a-zA-Z][a-zA-Z0-9\\-_:.]*(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
                {   name = "string.quoted.single";
                    begin = "'";
                    end = "'";
                    patterns = (
                        { match = "(?<=\"|')[a-zA-Z][a-zA-Z0-9\\-_:.]*(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
            ); 
        }; 
        "attribute-media" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(media)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                {   name = "string.quoted.double";
                    begin = "\"";
                    end = "\"";
                    patterns = (
                        { match = "(?<=\"|')(screen|tty|tv|projection|handheld|print|braille|aural|all)(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
                {   name = "string.quoted.single";
                    begin = "'";
                    end = "'";
                    patterns = (
                        { match = "(?<=\"|')(screen|tty|tv|projection|handheld|print|braille|aural|all)(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
            ); 
        }; 
        "attribute-name" = {
            name = "meta.attribute-with-value.html.strict";
            comment = "Bug: This may not take into account all possible characters in NMTOKEN.";
            begin = "(name)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                {   name = "string.quoted.double";
                    begin = "\"";
                    end = "\"";
                    patterns = (
                        {   match = "[\\w\\-:.]+"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
                {   name = "string.quoted.single";
                    begin = "'";
                    end = "'";
                    patterns = (
                        {   match = "[\\w\\-:.]+"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
            ); 
        }; 
        "attribute-profile" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(profile)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-rev" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(rev)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-rel" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(rel)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-scheme" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(scheme)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-src" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(src)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
           ); 
        }; 
        "attribute-standby" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(standby)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-tabindex" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(tabindex)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                {   name = "string.quoted.double";
                    begin = "\"";
                    end = "\"";
                    patterns = (
                        { match = "(?<=\"|')[0-9]+(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
                {   name = "string.quoted.single";
                    begin = "'";
                    end = "'";
                    patterns = (
                        { match = "(?<=\"|')[0-9]+(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
            ); 
        }; 
        "attribute-title" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(title)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-type" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(type)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-value" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(value)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                { include = "#values-generic-valid"; },
            ); 
        }; 
        "attribute-valuetype" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(valuetype)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                {   name = "string.quoted.double";
                    begin = "\"";
                    end = "\"";
                    patterns = (
                        { match = "(?<=\"|')(?i:data|ref|object)(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
                {   name = "string.quoted.single";
                    begin = "'";
                    end = "'";
                    patterns = (
                        { match = "(?<=\"|')(?i:data|ref|object)(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
            ); 
        }; 
        "attribute-width" = {
            name = "meta.attribute-with-value.html.strict";
            begin = "(width)=(?=([\"']).*?[\"'])";
            end = "";
            beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
            patterns = (
                {   name = "string.quoted.double";
                    begin = "\"";
                    end = "\"";
                    patterns = (
                        { match = "(?<=\"|')([0-9]{0,5}|[0-9]{0,4}%)(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
                {   name = "string.quoted.single";
                    begin = "'";
                    end = "'";
                    patterns = (
                        { match = "(?<=\"|')([0-9]{0,5}|[0-9]{0,4}%)(?=\"|')"; },
                        { include = "#values-generic-invalid"; },
                    ); 
                },
            ); 
        }; 
        "attributes-illegal_char" = {
            name = "invalid.illegal";
            match = "/(?!>)|[^\\s/>]";
        }; 
        "attributes-group-core" = {
            patterns = (
                { include = "#attribute-class"; },
                { include = "#attribute-id"; },
                { include = "#attribute-title"; },
            );
        }; 
        "attributes-group-events" = {
            patterns = (
                {   name = "meta.attribute-with-value.html.strict";
                    begin = "(onclick|ondblclick|onmouseup|onmouseover|onmousemove|onmouseout|onkeypress|onkeydown|onkeyup)=(?=([\"']).*?[\"'])";
                    end = "";
                    beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
                    patterns = (
                        {   name = "string.quoted.double";
                            begin = "\"";
                            end = "\"";
                            contentName = "source.js.embedded.html.strict";
                        },
                        {   name = "string.quoted.single";
                            begin = "'";
                            end = "'";
                            contentName = "source.js.embedded.html.strict";
                        },
                    ); 
                },
            );
        }; 
        "attributes-group-I18n" = {
            patterns = (
                {   name = "meta.attribute-with-value.html.strict";
                    begin = "(dir)=(?=([\"']).*?[\"'])";
                    end = "";
                    beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
                    patterns = (
                        {   name = "string.quoted.double";
                            begin = "\"";
                            end = "\"";
                            patterns = (
                                { match = "(?<=\"|')(ltr|rtl)(?=\"|')"; },
                                { include = "#values-generic-invalid"; },
                            ); 
                        },
                        {   name = "string.quoted.single";
                            begin = "'";
                            end = "'";
                            patterns = (
                                { match = "(?<=\"|')(ltr|rtl)(?=\"|')"; },
                                { include = "#values-generic-invalid"; },
                            ); 
                        },
                    ); 
                },
                {   name = "meta.attribute-with-value.html.strict";
                    comment = "Bug: This may not take into account all possible characters in NMTOKEN.";
                    begin = "(xml:lang)=(?=([\"']).*?[\"'])";
                    end = "";
                    beginCaptures = { 1 = { name = "entity.other.attribute-name.html"; }; };
                    patterns = (
                        {   name = "string.quoted.double";
                            begin = "\"";
                            end = "\"";
                            patterns = (
                                {   match = "[\\w\\-:]+"; },
                                { include = "#values-generic-invalid"; },
                            ); 
                        },
                        {   name = "string.quoted.single";
                            begin = "'";
                            end = "'";
                            patterns = (
                                {   match = "[\\w\\-:]+"; },
                                { include = "#values-generic-invalid"; },
                            ); 
                        },
                    ); 
                },
            ); 
        }; 
        "attributes-group-common" = {
            patterns = (
                { include = "#attributes-group-core"; },
                { include = "#attributes-group-events"; },
                { include = "#attributes-group-I18n"; },
            );
        }; 
    }; 
    uuid = "252A7F3A-5B98-4148-B079-6E0CB348E5A0"; 
}
